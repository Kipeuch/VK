// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/rpc/contract.go
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=./internal/rpc/mocks/contract_mocks.go -source=./internal/rpc/contract.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	entity "VK/internal/entity"
	service "VK/internal/generated/service"
)

// MockSubPubService is a mock of SubPubService interface.
type MockSubPubService struct {
	ctrl     *gomock.Controller
	recorder *MockSubPubServiceMockRecorder
	isgomock struct{}
}

// MockSubPubServiceMockRecorder is the mock recorder for MockSubPubService.
type MockSubPubServiceMockRecorder struct {
	mock *MockSubPubService
}

// NewMockSubPubService creates a new mock instance.
func NewMockSubPubService(ctrl *gomock.Controller) *MockSubPubService {
	mock := &MockSubPubService{ctrl: ctrl}
	mock.recorder = &MockSubPubServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubPubService) EXPECT() *MockSubPubServiceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockSubPubService) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockSubPubServiceMockRecorder) Close(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSubPubService)(nil).Close), ctx)
}

// Publish mocks base method.
func (m *MockSubPubService) Publish(subject string, msg any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", subject, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockSubPubServiceMockRecorder) Publish(subject, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockSubPubService)(nil).Publish), subject, msg)
}

// Subscribe mocks base method.
func (m *MockSubPubService) Subscribe(subject string, cb entity.MessageHandler) (entity.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", subject, cb)
	ret0, _ := ret[0].(entity.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockSubPubServiceMockRecorder) Subscribe(subject, cb any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockSubPubService)(nil).Subscribe), subject, cb)
}

// MockStreamManager is a mock of StreamManager interface.
type MockStreamManager struct {
	ctrl     *gomock.Controller
	recorder *MockStreamManagerMockRecorder
	isgomock struct{}
}

// MockStreamManagerMockRecorder is the mock recorder for MockStreamManager.
type MockStreamManagerMockRecorder struct {
	mock *MockStreamManager
}

// NewMockStreamManager creates a new mock instance.
func NewMockStreamManager(ctrl *gomock.Controller) *MockStreamManager {
	mock := &MockStreamManager{ctrl: ctrl}
	mock.recorder = &MockStreamManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamManager) EXPECT() *MockStreamManagerMockRecorder {
	return m.recorder
}

// AddConn mocks base method.
func (m *MockStreamManager) AddConn(subject string, conn service.PubSub_SubscribeServer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddConn", subject, conn)
}

// AddConn indicates an expected call of AddConn.
func (mr *MockStreamManagerMockRecorder) AddConn(subject, conn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddConn", reflect.TypeOf((*MockStreamManager)(nil).AddConn), subject, conn)
}

// RemoveConn mocks base method.
func (m *MockStreamManager) RemoveConn(subject string, conn service.PubSub_SubscribeServer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveConn", subject, conn)
}

// RemoveConn indicates an expected call of RemoveConn.
func (mr *MockStreamManagerMockRecorder) RemoveConn(subject, conn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveConn", reflect.TypeOf((*MockStreamManager)(nil).RemoveConn), subject, conn)
}
